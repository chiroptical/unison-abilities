-- These are watchers, they run every time we reload this file in Unison repl
> Stack.run Stack.one
> Stack.run Stack.two
> Stack.run Stack.three

-----

-- The interpreter of `Stack` for `List a`
-- `k _` the hole will always be the return type for the ability method, `get : f a`
-- `h _` the hole will be an updated version of the accumulator
Stack.run : '{Stack List a} b -> b
Stack.run stack =
  h : [a] -> Request {Stack List a} b -> b
  h acc = cases 
    {Stack.get -> k} -> handle k acc with h acc
    {Stack.put x -> k} -> handle k () with h (x +: acc)
    {Stack.pop -> k} -> match acc with
      x +: xs -> handle k (Some x) with h xs
      _ -> handle k None with h []
    {x} -> x
  handle !stack with h []

Stack.one : '{Stack List Nat} [Nat]
Stack.one = 'let
  Stack.put 1
  Stack.put 2
  Stack.get

Stack.two : '{Stack List Nat} [Nat]
Stack.two = 'let
  Stack.put 2
  Stack.put 4
  match (Stack.pop, Stack.pop) with
    (Some x, Some y) -> Stack.put (x + y)
    _ -> ()
  Stack.get

Stack.three : '{Stack List Nat} (Optional Nat)
Stack.three = 'let
  Stack.pop

ability Stack f a where
  get : f a
  put : a -> ()
  pop : Optional a
